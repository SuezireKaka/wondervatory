<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="www.wonder.vatory.work.mapper.WorkMapper">
	<!-- resultMap : PROJECTION 결과를 객체 속성에 바인딩 -->
	<resultMap id="rmReplyVO" extends="nsEntity.rmTimeEntity"
		type="www.wonder.vatory.work.model.ReplyVO">
		<result property="content" column="content" />
		<result property="hTier" column="h_tier" />
		<result property="readCount" column="read_cnt" />
		<result property="likeCount" column="like_cnt" />
		<result property="dislikeCount" column="dis_cnt" />
		<association property="boardVO" columnPrefix="bb_"
				resultMap="www.wonder.vatory.work.mapper.BoardMapper.rmBoardVO" />
		<association property="writer" columnPrefix="acc_"
				resultMap="www.wonder.vatory.party.mapper.PartyMapper.rmAccountVO" />	
		<discriminator javaType="String" column="descrim">
         	<case value="Series" resultMap="rmSeriesVO" />
         	<case value="Post" resultMap="rmPostVO" />
        </discriminator>
	</resultMap>
	<!-- extends : 확장하기 = 상속 -->
	<resultMap id="rmSemiPostVO" extends="rmReplyVO"
		type="www.wonder.vatory.work.model.SemiPostVO">
		<result property="title" column="title" />
		<result property="isComplete" column="complete" />
	</resultMap>
	
	<resultMap id="rmPostVO" extends="rmSemiPostVO"
		type="www.wonder.vatory.work.model.PostVO">
		<result property="isFree" column="free" />
	</resultMap>
	
	<resultMap id="rmSeriesVO" extends="rmSemiPostVO"
		type="www.wonder.vatory.work.model.SeriesVO">
		<result property="seriesState" column="series_status" />

	</resultMap>

	<!-- public long getFoundRows(); -->
	<select id="getFoundRows" resultType="long">
		SELECT FOUND_ROWS()
	</select>
	<!-- public ResponseEntity<DreamPair<List<ReplyVO>, PagingDTO>> listAllSeries(@PathVariable String boardId, @PathVariable int page); -->
	<select id="listAllSeries" resultMap="rmSeriesVO">
	select SQL_CALC_FOUND_ROWS w.*, b.id bb_id, b.name bb_name, b.descrip bb_descrip,
	 		a.id acc_id, a.login_id acc_login_id, a.nick acc_nick
	  from T_work w LEFT OUTER JOIN t_bb b
	       ON w.bb_id = b.id
	       LEFT OUTER JOIN t_account a
	       ON w.writer_id = a.id
	where w.bb_id = #{boardId}
	  and LENGTH(w.id) = 4
	  and w.descrim = 'Series'
	 order by w.id DESC
	 limit #{paging.limit} offset #{paging.offset}
	 <!--  limit #{paging.limit} offset #{paging.offset} -->
	</select>
	
	<!-- public List<PostVO> listAllPost(@Param("seriesId") String seriesId, @Param("paging") PagingDTO paging); -->
	<select id="listAllPost" resultMap="rmReplyVO">
	select SQL_CALC_FOUND_ROWS w.*, b.id bb_id, b.name bb_name, b.descrip bb_descrip,
	 		a.id acc_id, a.login_id acc_login_id, a.nick acc_nick
	  from T_work w LEFT OUTER JOIN t_bb b
	       ON w.bb_id = b.id
	       LEFT OUTER JOIN t_account a
	       ON w.writer_id = a.id
	where w.id like CONCAT(#{seriesId}, '%')
	  and LENGTH(w.id) = 8
	  and w.descrim = 'Post'
	  and w.complete = 1
	 order by w.id DESC
	 limit #{paging.limit} offset #{paging.offset}
	 <!--  limit #{paging.limit} offset #{paging.offset} -->
	</select>
	
	
	<!-- public List<ReplyVO> searchByTfIdf(@Param("boardId") String boardId,
			@Param("arrSearch") String[] arrSearch, @Param("paging") PagingDTO paging); -->
	<!-- public List<PostVO> searchByTfIdf(@Param("boardId") String boardId, @Param("arrSearch") String[] arrSearch, @Param("paging") PagingDTO paging); -->
	<select id="searchByTfIdf" resultMap="rmPostVO">
	select SQL_CALC_FOUND_ROWS
			w.*, a.login_id acc_login_id
	  from (select w.id wid, sum(r.tf) * log(b.post_cnt / (count(w.id) + 1)) importance
		  from t_tag t, t_tgt_tag r, T_work w, t_bb b
	 WHERE t.word IN 
			<foreach item="word" collection="arrSearch" open="(" separator="," close=")">
				#{word}
			</foreach>
		   and t.id = r.tag_id
		   and r.tgt_name = 'T_work'
		   and r.tgt_id = w.id
		   and w.descrim = 'Series'
		   and w.bb_id = b.id
		   and b.id = #{boardId}
	  group by w.id) pst,
	  T_work w LEFT OUTER JOIN t_account a
	       ON w.writer_id = a.id
	 where pst.wid = w.id
	 order by pst.importance desc
	 limit #{paging.limit} offset #{paging.offset}
	</select>
	
	<!-- public List<ReplyVO> findSeriesById(String id); -->
	<select id="findSeriesById" resultMap="rmReplyVO">
	select w.*, 
	a.id acc_id, a.login_id acc_login_id, a.owner_id acc_owner_id, a.response_id acc_response_id, a.nick acc_nick, a.intro acc_intro,
	 a.alive a_alive, a.reg_dt a_reg_dt, a.upt_dt a_upt_dt
	  from T_work w LEFT OUTER JOIN T_account a
	       ON w.writer_id = a.id
	 where w.id =#{id}
	</select>
	
	<!-- public List<ReplyVO> findPostById(String id); -->
	<select id="findPostById" resultMap="rmReplyVO">
	select w.*, 
	a.id acc_id, a.login_id acc_login_id, a.owner_id acc_owner_id, a.response_id acc_response_id, a.nick acc_nick, a.intro acc_intro,
	 a.alive a_alive, a.reg_dt a_reg_dt, a.upt_dt a_upt_dt
	  from T_work w LEFT OUTER JOIN T_account a
	       ON w.writer_id = a.id
	 where w.id like CONCAT(#{id}, '%')
	</select>
	<!-- public void incReadCount(String id); -->
	<update id="incReadCount">
	update T_work
	   set 	upt_dt = upt_dt,
			read_cnt = read_cnt + 1
	 where id = #{id}
	</update>
	
	<!-- public int createSemiPost(@Param("parent") SemiPostVO parent,
			@Param("child") SemiPostVO child, @Param("type") String type); -->
	<insert id="createSemiPost">
		<selectKey keyProperty="child.id" resultType="String" order="BEFORE">
    		select CONCAT(#{child.id}, NEXT_PK('s_#{type}'))  
  		</selectKey>
	INSERT INTO T_work(id, h_level, descrim, bb_id, writer_id, TITLE, content, complete)
		VALUES (#{child.id}, #{parent.hTier} + 1, #{type}, '0000', #{child.writer.id}, #{child.title}, #{child.content}, #{child.isComplete});
	</insert>
	
	<!-- public int updateSemiPost(@Param("parent") SemiPostVO parent,
			@Param("child") SemiPostVO child, @Param("type") String type); -->
	<insert id="updateSemiPost">
	update T_work
	   set TITLE = #{child.title},
	       content = #{child.content},
	       complete = #{child.isComplete}
	 where id = #{child.id}
	</insert>
	
	<!-- public int updatePost(PostVO post);-->
	<update id="updatePost">
	update T_work
	   set TITLE = #{title},
	       content = #{content}
	 where id = #{id} 
	</update>
	
	<!-- public int deleteReply(String id);-->
	<delete id="deleteReply">
	delete from T_work
	 where id like CONCAT(#{id}, '%');
	</delete>

</mapper>
