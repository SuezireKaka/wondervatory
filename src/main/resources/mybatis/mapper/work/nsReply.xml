<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="www.wonder.vatory.work.mapper.WorkMapper">
	<!-- resultMap : PROJECTION 결과를 객체 속성에 바인딩 -->
	<resultMap id="rmWorkVO" extends="nsEntity.rmTimeEntity"
		type="www.wonder.vatory.work.model.WorkVO">
		<association property="writer" columnPrefix="acc_"
				resultMap="www.wonder.vatory.party.mapper.PartyMapper.rmAccountVO" />	
	</resultMap>
	
	<resultMap id="rmReplyVO" extends="rmWorkVO"
		type="www.wonder.vatory.work.model.ReplyVO">
		<result property="content" column="content" />
		<result property="readCount" column="read_cnt" />
		<result property="likeCount" column="like_cnt" />
		<result property="dislikeCount" column="dis_cnt" />
		<result property="favorites" column="favorites" />
		<association property="boardVO" columnPrefix="bb_"
				resultMap="www.wonder.vatory.work.mapper.BoardMapper.rmBoardVO" />
		<discriminator javaType="String" column="descrim">
         	<case value="Series" resultMap="rmSeriesVO" />
         	<case value="Post" resultMap="rmPostVO" />
        </discriminator>
	</resultMap>
	<!-- extends : 확장하기 = 상속 -->
	<resultMap id="rmSemiPostVO" extends="rmReplyVO"
		type="www.wonder.vatory.work.model.SemiPostVO">
		<result property="title" column="title" />
		<result property="isComplete" column="complete" />
	</resultMap>
	
	<resultMap id="rmPostVO" extends="rmSemiPostVO"
		type="www.wonder.vatory.work.model.PostVO">
		<result property="isFree" column="free" />
	</resultMap>
	
	<resultMap id="rmSeriesVO" extends="rmSemiPostVO"
		type="www.wonder.vatory.work.model.SeriesVO">
		<result property="seriesState" column="series_status" />
		<collection property="genreList" columnPrefix="gen_"
			resultMap="www.wonder.vatory.work.mapper.GenreMapper.rmGenreVO">
		</collection>
	</resultMap>
	
	<!-- public long getFoundRows(); 
	<select id="getFoundRows" resultType="long">
		SELECT FOUND_ROWS()
	</select> -->

	<!-- public ResponseEntity<DreamPair<List<ReplyVO>, PagingDTO>> listAllSeries(@PathVariable String boardId, @PathVariable int page, String genreId); -->
	<select id="listAllSeries" resultMap="rmSeriesVO">
	select SQL_CALC_FOUND_ROWS w.*, b.id bb_id, b.name bb_name, b.descrip bb_descrip,
	 		a.id acc_id, a.descrim acc_descrim,
			a.login_id acc_login_id, a.nick acc_nick,
	 		a.login_id acc_login_id, a.kakao_nick acc_kakao_nick,
	 					gen.id gen_id, gen.genre gen_genre, gen.info gen_info
	  from T_work w LEFT OUTER JOIN t_bb b
	       ON w.bb_id = b.id
	       LEFT OUTER JOIN t_account a
	       ON w.writer_id = a.id
	       	  LEFT OUTER JOIN t_genre_work rel
	    ON w.id = rel.work_id
	  LEFT OUTER JOIN t_sys_genre gen
	    ON rel.genre_id = gen.id
	where w.bb_id = #{boardId}
	  and w.descrim = 'Series'
	  	  AND (#{genreId} is null or gen.id = #{genreId})
	 order by w.id DESC
	 limit #{paging.seriesLimit} offset #{paging.offset}
	</select>
	
	<!-- public List<PostVO> listAllPost(@Param("seriesId") String seriesId, @Param("paging") PagingDTO paging); -->
	<select id="listAllPost" resultMap="rmReplyVO">
	select SQL_CALC_FOUND_ROWS w.*, b.id bb_id, b.name bb_name, b.descrip bb_descrip,
			a.id acc_id, a.descrim acc_descrim,
			a.login_id acc_login_id, a.nick acc_nick,
	 		a.login_id acc_login_id, a.kakao_nick acc_kakao_nick
	  from T_work w LEFT OUTER JOIN t_bb b
	       ON w.bb_id = b.id
	       LEFT OUTER JOIN t_account a
	       ON w.writer_id = a.id
	where w.id like CONCAT(#{seriesId}, '%')
	  and w.descrim = 'Post'
	  and w.complete = 1
	 order by w.id DESC
	 limit #{paging.postLimit} offset #{paging.offset}
	</select>
	
	<!-- 	public List<SeriesVO> listUserSeries(@Param("nick") String nick, @Param("paging") PagingDTO paging); -->
	<select id="listUserSeries" resultMap="rmSeriesVO">
	select SQL_CALC_FOUND_ROWS w.*, 
			a.id acc_id, a.descrim acc_descrim,
			a.login_id acc_login_id, a.nick acc_nick,
	 		a.login_id acc_login_id, a.kakao_nick acc_kakao_nick
	  from T_work w LEFT OUTER JOIN t_account a
	       ON w.writer_id = a.id
	where a.id = #{id}
	  and w.descrim = 'Series'
	 order by w.id DESC
	 limit #{paging.seriesLimit} offset #{paging.offset}
	</select>
	
	<!-- public List<ReplyVO> searchByTfIdf(@Param("boardId") String boardId,
			@Param("arrSearch") String[] arrSearch, @Param("paging") PagingDTO paging); -->
	<!-- public List<PostVO> searchByTfIdf(@Param("boardId") String boardId, @Param("arrSearch") String[] arrSearch, @Param("paging") PagingDTO paging); -->
	<select id="searchByTfIdf" resultMap="rmPostVO">
	select SQL_CALC_FOUND_ROWS
			w.*, a.kakao_id acc_kakao_id, a.descrim acc_descrim, a.login_id acc_login_id
	  from (select w.id wid, sum(r.tf) * log(b.post_cnt / (count(w.id) + 1)) importance
		  from t_tag t, t_tgt_tag r, T_work w, t_bb b
	 WHERE t.word IN 
			<foreach item="word" collection="arrSearch" open="(" separator="," close=")">
				#{word}
			</foreach>
		   and t.id = r.tag_id
		   and r.tgt_name = 'T_work'
		   and r.tgt_id = w.id
		   and w.bb_id = b.id
		   and b.id = #{boardId}
	  group by w.id) pst,
	  T_work w LEFT OUTER JOIN t_account a
	       ON w.writer_id = a.id
	 where pst.wid = w.id
	 order by pst.importance desc
	 limit #{paging.seriesLimit} offset #{paging.offset}
	</select>
	
	<!-- public List<ReplyVO> findSeriesById(String id); -->
	<select id="findSeriesById" resultMap="rmReplyVO">
	select w.*, a.id acc_id, a.descrim acc_descrim,
			a.login_id acc_login_id, a.nick acc_nick,
			a.kakao_id acc_kakao_id, a.kakao_nick acc_kakao_nick,
			a.owner_id acc_owner_id, a.response_id acc_response_id, a.intro acc_intro,
			a.alive a_alive, a.reg_dt a_reg_dt, a.upt_dt a_upt_dt,
			gen.id gen_id, gen.genre gen_genre, gen.info gen_info
	  from T_work w
	  LEFT OUTER JOIN T_account a
	    ON w.writer_id = a.id
	  LEFT OUTER JOIN t_genre_work rel
	    ON w.id = rel.work_id
	  LEFT OUTER JOIN t_sys_genre gen
	    ON rel.genre_id = gen.id
	 where w.id = #{id}
	</select>
	
	<!-- public List<ReplyVO> findPostById(String id); -->
	<select id="findPostById" resultMap="rmReplyVO">
	select w.*, a.id acc_id, a.descrim acc_descrim,
			a.login_id acc_login_id, a.nick acc_nick,
			a.kakao_id acc_kakao_id, a.kakao_nick acc_kakao_nick,
			a.owner_id acc_owner_id, a.response_id acc_response_id, a.intro acc_intro,
			a.alive a_alive, a.reg_dt a_reg_dt, a.upt_dt a_upt_dt
	  from T_work w LEFT OUTER JOIN T_account a
	       ON w.writer_id = a.id
	 where w.id like CONCAT(#{id}, '%')
	</select>
	
	<!-- 	public List<SeriesVO> favoritesAll(@Param("ownerId") String ownerId,
			@Param("paging") PagingDTO paging); -->
	<select id="favoritesAll" resultMap="rmReplyVO">
	select SQL_CALC_FOUND_ROWS w.*, a.descrim acc_descrim
	  from T_work w
	  LEFT OUTER JOIN t_favorites f
	       ON f.response_id = w.id
	  LEFT OUTER JOIN t_account a
	       ON f.owner_id = a.id
	 WHERE w.descrim = 'Series'
	   AND f.favorites = 1
	   and a.id = #{ownerId}
	 order by w.id DESC
	 LIMIT #{paging.seriesLimit} offset #{paging.offset}
	</select>
	<!-- public PostVO getPrev(String parentId, String id); -->
	<select id="getPrev" resultMap="rmReplyVO">
	SELECT w.*, a.descrim acc_descrim <!-- association에 discriminator가 있으면 무조건 acc_descrim -->
	  FROM t_work w
	  left outer join t_account a
	    ON w.writer_id = a.id
	 WHERE w.id like CONCAT(#{parentId}, '%')
	   AND w.descrim = 'Post'
	   <![CDATA[AND w.id < #{id}]]>
	   AND w.complete = 1
	 ORDER BY w.id DESC
	 LIMIT 1
	 </select>

	<!-- public PostVO getNext(String parentId, String id); -->
	<select id="getNext" resultMap="rmReplyVO">
	SELECT w.*, a.descrim acc_descrim
	  FROM t_work w
	  left outer join t_account a
	    ON w.writer_id = a.id
	 WHERE w.id like CONCAT(#{parentId}, '%')
	   AND w.descrim = 'Post'
	   AND w.id > #{id}
	   and w.complete = 1
	 LIMIT 1
	</select>
	
	<!-- public void incReadCount(String id); -->
	<update id="incReadCount">
	update T_work
	   set 	upt_dt = upt_dt,
			read_cnt = read_cnt + 1
	 where id = #{id}
	</update>
	
	
	
	<!-- public int onLike(String id); -->
	<update id="onLike">
	update T_work
	   set 	upt_dt = upt_dt,
			like_cnt = like_cnt + 1
	 where id = #{id}
	</update>
	<!-- 	public int onDisLike(String id); -->
		<update id="onDisLike">
	update T_work
	   set 	upt_dt = upt_dt,
			dis_cnt = dis_cnt + 1
	 where id = #{id}
	</update>
	<!-- 	public boolean isFirstFavorites(String ownerId, String responseId); -->
	<select id="isFirstFavorites" resultType="boolean">
		SELECT count(*) = 0 
		  FROM t_favorites 
		 WHERE owner_id=#{ownerId} 
		   AND response_id=#{responseId}
	</select>
	
	<!-- 	public boolean isFavorites(String ownerId, String responseId); -->
	<select id="isFavorites" resultType="boolean">
		SELECT count(*)
		  FROM t_favorites 
		 WHERE owner_id=#{ownerId}
		   AND response_id=#{responseId}
		   AND favorites = 1
	</select>
	
	<!-- public int createSemiPost(@Param("parent") SemiPostVO parent,
			@Param("child") SemiPostVO child, @Param("type") String type); 
	<insert id="createSemiPost">
		<selectKey keyProperty="child.id" resultType="String" order="BEFORE">
    		select CONCAT(#{parent.id}, NEXT_PK('s_${type}'))  
  		</selectKey>
	INSERT INTO T_work(id, h_level, descrim, bb_id, writer_id, TITLE, content, complete)
		VALUES (#{child.id}, #{child.hTier}, #{type}, #{child.boardVO.id}, #{child.writer.id}, #{child.title}, #{child.content}, #{child.isComplete});
	</insert>-->
	
	<!-- public int createSemiPost(@Param("semiPost") SemiPostVO semiPost,
			@Param("type") String type); -->
	<insert id="createSemiPost">
		<selectKey keyProperty="semiPost.id" resultType="String" order="BEFORE">
    		select CONCAT(#{semiPost.id}, NEXT_PK('s_${type}'))  
  		</selectKey>
	INSERT INTO T_work(id, h_tier, descrim, bb_id, writer_id, TITLE, content, complete)
		VALUES (#{semiPost.id}, #{semiPost.hTier}, #{type}, #{semiPost.boardVO.id}, #{semiPost.writer.id}, #{semiPost.title}, #{semiPost.content}, #{semiPost.isComplete});
	</insert>
	
	
	
	
	<!-- public int updateSemiPost(@Param("parent") SemiPostVO parent,
			@Param("child") SemiPostVO child, @Param("type") String type); -->
	<insert id="updateSemiPost">
	update T_work
	   set TITLE = #{semiPost.title},
	       content = #{semiPost.content},
	       complete = #{semiPost.isComplete}
	 where id = #{semiPost.id}
	</insert>
	
	<!-- 	public int firstFavorites(String ownerId, String responseId); -->
	<insert id="firstFavorites">
		INSERT INTO t_favorites(owner_id, response_id)
		VALUES (#{ownerId}, #{responseId});
	</insert>
	
	<!-- 	public AccountVO toggleFavorites(String ownerId); -->
	<update id="toggleFavorites">
	update t_favorites
	set favorites=!favorites
		WHERE owner_id=#{ownerId}
		and  response_id=#{responseId};
	</update>
	
	<!-- public int deleteReply(String id);-->
	<delete id="deleteReply">
	delete from T_work
	 where id like CONCAT(#{id}, '%');
	</delete>

</mapper>
