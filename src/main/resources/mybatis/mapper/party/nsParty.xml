<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="www.wonder.vatory.party.mapper.PartyMapper">
	<resultMap id="rmPartyVO" extends="nsEntity.rmEntity"
		type="www.wonder.vatory.party.model.PartyVO">
		<result property="name" column="name" />
		<result property="birthDate" column="birth" />
		<!-- 1:N query. 성능 향상 -->
		<collection property="contactPointList" columnPrefix="cp_"
			resultMap="rmContactPointVO">
		</collection>
	</resultMap>

	<resultMap id="rmPersonVO" extends="rmPartyVO"
		type="www.wonder.vatory.party.model.PersonVO" >
		<result property="sex" column="sex" />

		<collection property="accountList" columnPrefix="acc_"
			resultMap="rmAccountVO">
		</collection>
	</resultMap>
	
	<resultMap id="rmOrganizationVO" extends="rmPartyVO"
		type="www.wonder.vatory.party.model.OrganizationVO" />

	<resultMap id="rmContactPointVO"
		type="www.wonder.vatory.party.model.ContactPointVO">
		<id property="cpType" column="cp_type" />
		<result property="cpVal" column="cp_val" />
	</resultMap>
	
	<resultMap id="rmAccountVO" extends="nsEntity.rmTimeEntity"
		type="www.wonder.vatory.party.model.AccountVO">
		<result property="loginId" column="login_id" />
		<result property="passWord" column="pass_word" />
		<result property="nick" column="nick" />
		<result property="introduction" column="intro" />
		<result property="isAlive" column="alive" />
		<association property="owner" columnPrefix="own_"
			resultMap="rmOrganizationVO" />
		<association property="response" columnPrefix="rsp_"
			resultMap="rmPersonVO" />
		<!--  인가(Authorization) 처리를 위한 것임. -->
		<collection property="roleList" columnPrefix="role_"
			resultMap="rmRoleVO">
		</collection>
	</resultMap>
	
	<resultMap id="rmRoleVO"
		type="www.wonder.vatory.party.model.RoleVO">
		<result property="role" column="role" />
		<result property="manual" column="manual" />
		<collection property="allowedActsList" columnPrefix="allow_"
			resultMap="rmActVO">
		</collection>
	</resultMap>

	
	
	<resultMap id="rmActVO"
		type="www.wonder.vatory.party.model.ActVO">
		<id property="action" column="action" />
		<result property="manual" column="manual" />
	</resultMap>
	
	<!-- public long getFoundRows(); -->
	<select id="getFoundRows" resultType="long">
		SELECT FOUND_ROWS()
	</select>

	<!-- 	public List<AccountVO> listAllAccount(String ownerId, PagingDTO paging); -->
	<select id="listAllAccount" resultMap="rmAccountVO">
		SELECT SQL_CALC_FOUND_ROWS acc.*,
			owner.id own_id, owner.name own_name,
			rsp.id rsp_id, rsp.name rsp_name, rsp.birth rsp_birth, rsp.sex rsp_sex,
			role.role role_role, role.account_id role_account_id
		  FROM T_Account acc
		  LEFT OUTER JOIN T_party owner
		    on owner.id = acc.owner_id
		  LEFT OUTER JOIN T_party rsp
		    on rsp.id = acc.response_id
		  LEFT OUTER JOIN T_role role
		    on role.account_id = acc.id
		 where acc.owner_id = #{ownerId}
		   AND acc.alive = 1
		 order by acc.id DESC
		 limit #{paging.partyLimit} offset #{paging.offset};
	</select>
	
	<!-- public List<ContactPointVO> listAllCpOf(@Param("ownerId") String ownerId); -->
	<select id="listAllCpOf" resultMap="rmContactPointVO">
		SELECT *
		  from t_contact_point
		 WHERE owner_id = #{ownerId}
	</select>
	
	<!-- public AccountVO findByLoginId(String loginId); -->
	<select id="findByLoginId" resultMap="rmAccountVO">
		SELECT acc.*, 
			own.name own_name,
			rsp.name rsp_name, rsp.birth rsp_birth, rsp.sex rsp_sex,
			role.role role_role
		  FROM T_Account acc
		  LEFT OUTER JOIN T_role role
		    on role.account_id = acc.id
		  LEFT OUTER JOIN T_party own
		    on own.id = acc.owner_id
		  LEFT OUTER JOIN T_party rsp
		    on rsp.id = acc.response_id
		 where acc.login_id = #{loginId}
		   and acc.alive = true
	</select>
	<!-- public AccountVO findByNick(String nick); -->
	<select id="findByNick" resultMap="rmAccountVO">
		SELECT acc.*, 
			own.name own_name,
			rsp.id rsp_id, rsp.name rsp_name, rsp.birth rsp_birth, rsp.sex rsp_sex,
			cp.cp_type rsp_cp_cp_type, cp.cp_val rsp_cp_cp_val,
			role.role role_role
		  FROM T_Account acc
		  LEFT OUTER JOIN T_role role
		    on role.account_id = acc.id
		  LEFT OUTER JOIN T_party own
		    on own.id = acc.owner_id
		  LEFT OUTER JOIN T_party rsp
		    on rsp.id = acc.response_id
		  LEFT OUTER JOIN T_contact_Point cp
		    on cp.owner_id = acc.id
		 where acc.nick = #{nick}
		   and acc.alive = TRUE
	</select>
	
	<!-- public boolean isValidLoginId(String loginId); -->
	<select id="isValidLoginId" resultType="boolean">
		SELECT count(1) = 0
		  FROM t_account
		 where login_id = binary(#{loginId})
	</select>

	<!-- public boolean isValidNick(String nick); -->
	<select id="isValidNick" resultType="boolean">
		SELECT count(1) = 0
		  FROM t_account
		 where nick = binary(#{nick})
	</select>

	<!-- 	public int createPerson(PersonVO person); OGNL 사용함 -->
	<insert id="createPerson">
		<selectKey keyProperty="id" resultType="String"
			order="BEFORE">
			select NEXT_PK('s_party')
		</selectKey>

		INSERT INTO T_party(id, descrim, name, sex, birth)
		VALUES (#{id}, 'Person', #{name}, #{sex}, #{birthDate});

	  <if test="!(contactPointList.isEmpty())">
			INSERT INTO T_contact_Point(owner_id, cp_type, cp_val)
			VALUES
			<foreach item="cp" collection="contactPointList" separator=","
				close=";">
				(#{id}, #{cp.cpType}, #{cp.cpVal})
			</foreach>
	  </if>
	</insert>
	
	<!-- 	public int createAccount(AccountVO account); -->
	<insert id="createAccount">
		<selectKey keyProperty="id" resultType="String"
			order="BEFORE">
			select NEXT_PK('s_account')
		</selectKey>
		INSERT INTO T_Account(id, login_id, pass_word, owner_id, response_id, nick, intro)
		VALUES (#{id}, #{loginId}, #{passWord}, #{owner.id}, #{response.id}, #{nick}, #{introduction});
	</insert>
	
	<!-- 	public int createRole(@Param("account") AccountVO account, @Param("role") RoleVO role); -->
	<insert id="createRole">
		INSERT INTO t_role(role, account_id)
		VALUES (#{role.role}, #{account.id});
	</insert>
	
	
</mapper>
