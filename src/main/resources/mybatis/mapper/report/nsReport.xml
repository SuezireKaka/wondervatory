<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="www.wonder.vatory.report.mapper.ReportMapper">
	<resultMap id="rmReportVO" extends="nsEntity.rmTimeEntity"
		type="www.wonder.vatory.report.model.ReportVO">
		<result property="cause" column="cause" />
		<result property="suspectId" column="suspect_id" />
		<result property="suspectTable" column="suspect_table" />
		<association property="reporter" columnPrefix="repo_"
			resultMap="www.wonder.vatory.party.mapper.PartyMapper.rmAccountVO" />

		<collection property="rptTypesList" columnPrefix="type_"
			resultMap="rmReportCodeVO">
		</collection>
	</resultMap>

	<!-- 인터페이스 프로퍼티 처리 꼼수 of 꼼수 - 결국 하나의 클래스로 합쳐질 거지만 일단 분리해놓기
		→ deprecated : 그냥 suspectId랑 suspectTable로 처리
	<discriminator javaType="String" column="suspect_table">
			<case value="t_account" resultMap="rmAccountReportVO" />
			<case value="t_work" resultMap="rmReportWorkVO" />
		</discriminator>
	</resultMap>
	<resultMap id="rmAccountReportVO" extends="rmReportVO"
		type="www.wonder.vatory.report.model.ReportVO">
		<association property="suspect" columnPrefix="sus_"
			resultMap="www.wonder.vatory.party.mapper.PartyMapper.rmAccountVO" />
	</resultMap>
	<resultMap id="rmReportWorkVO" extends="rmReportVO"
		type="www.wonder.vatory.report.model.ReportVO">
		<association property="suspect" columnPrefix="sus_"
			resultMap="www.wonder.vatory.work.mapper.WorkMapper.rmReplyVO" />
	</resultMap>-->

	<resultMap id="rmReportCodeVO"
		type="www.wonder.vatory.report.model.ReportCodeVO">
		<result property="rptType" column="rpt_type" />
		<result property="rptInfo" column="rpt_info" />
	</resultMap>

	<!-- public List<ReportCodeVO> listAllReportCodes(); -->
	<select id="listAllReportCodes" resultMap="rmReportCodeVO">
		SELECT *
		FROM t_sys_rptype
	</select>

	<!-- public List<ReportVO> listAllReports(PagingDTO paging); -->
	<select id="listAllReports" resultMap="rmReportVO">
		select SQL_CALC_FOUND_ROWS r.*,
		repo.id repo_id, repo.descrim repo_descrim,
		repo.nick repo_nick, repo.kakao_nick repo_kakao_nick
		  from T_report r
		  Left outer join t_account repo
		    on r.reporter_id = repo.id
		 order by r.upt_dt
		 limit #{paging.seriesLimit} offset #{paging.offset}
	</select>

	<!-- public List<ReportCodeVO> listAllTypesOf(@Param("id") String id); -->
	<select id="listAllTypesOf" resultMap="rmReportCodeVO">
		SELECT rpt.*
		  FROM t_sys_rptype rpt
		  Left outer join t_report_cls c
		    on rpt.rpt_type = c.rpt_type
		 where c.rpt_id = #{id}
	</select>
	
	<!-- public int public int countRptTypesOf(String id); -->
	<select id="countRptTypesOf">
		SELECT count(*)
		  from t_report_cls
		 where rpt_id = #{id}
	</select>
	
	<!-- public int insertToSync(@Param("reportId") String reportId, @Param("offset") int offset,
			@Param("insertList") List<ReportCodeVO> insertList);-->
	<insert id="insertToSync">
		<if test="!(insertList.isEmpty())">
			INSERT INTO t_report_cls(rpt_id, rpt_level, rpt_type)
			VALUES
			<foreach item="rpt" collection="insertList" separator="," index="index" close=";">
				(#{reportId}, (#{index} + #{offset}), #{rpt.rptType})
			</foreach>
		</if>
	</insert>
	
	<!--public int createReport(ReportVO report);-->
	<insert id="createReport">
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
    		select NEXT_PK('s_report') 
  		</selectKey>
		INSERT INTO t_report(id, reporter_id, suspect_id, suspect_table, cause)
		VALUES (#{id}, #{reporter.id}, #{suspectId}, #{suspectTable}, #{cause})
	</insert>
	
	<!-- public int updateAllRptFrom(@Param("reportId") String reportId,
			@Param("updateList") List<ReportCodeVO> updateList);-->
	<update id="updateAllPropsFrom">
		<if test="!(updateList.isEmpty())">
			UPDATE t_report_cls cls
			  JOIN (
			<foreach item="rpt" collection="updateList" separator=" UNION ALL " index="index" close=")">
			<!-- 얼마 되지도 않는 거에 수정 여부 체크하기 시름 ㅡ.ㅡ -->
			<choose>
			    <when test = "index == 0">
				  SELECT #{index} as LEVEL, #{rpt.rptType} as rpt_type
			    </when>
			    <otherwise>
				  SELECT #{index}, #{prop.propType}, #{prop.propVal}
			    </otherwise>
			  </choose>
			</foreach> vals ON rpt.rpt_level = vals.level
			   SET cls.rpt_type = vals.rpt_type
			 WHERE cls.rpt_id = #{reportId}
		</if>
	</update>
	
	<!-- public int deleteToSync(@Param("reportId") String reportId,
			@Param("border") int border);-->
	<delete id="deleteToSync">
		DELETE cls.*
		  from t_report_cls cls
		 where cls.owner_id = #{reportId}
		   and cls.level >= ${border}
	</delete>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- public int createReport(ReportVO report);
	public int insertToSync(@Param("reportId") String reportId,
			@Param("size") int size, @Param("insertList") List<ReportCodeVO> insertList);

	public int updateReport(@Param("report") ReportVO report);
	public int updateAllRptFrom(@Param("reportId") String reportId,
			@Param("updateList") List<ReportCodeVO> updateList);

	public int deleteToSync(@Param("reportId") String reportId,
			@Param("requestCount") int requestCount);-->



</mapper>
